@using EasyCarpet.Web.Helpers;
@using EasyCarpet.Shared;
@using EasyCarpet.Shared.Features.Carpets;
@using System.IO

@if (_carpet != null)
{
    <EditForm Model="@_carpet" OnValidSubmit="HandleSubmitAsync">
        <FluentValidationValidator />
        <ServerSideValidator @ref="_serverSideValidator" />

        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@_transactionMode</MudText>
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudTextField @bind-Value="_carpet.Name" Label="Name" Variant="Variant.Text" Margin="Margin.Normal"
                              For="@(()=> _carpet.Name)"></MudTextField>
                <MudTextField @bind-Value="_carpet.Brand" Label="Brand" Variant="Variant.Text" Margin="Margin.Normal"
                              For="@(()=> _carpet.Brand)"></MudTextField>
                <MudTextField @bind-Value="_carpet.Description" Label="Description" Variant="Variant.Text" Margin="Margin.Normal"
                              For="@(()=> _carpet.Description)"></MudTextField>
                <MudTextField @bind-Value="_carpet.Style" Label="Style" Variant="Variant.Text" Margin="Margin.Normal"
                              For="@(()=> _carpet.Style)"></MudTextField>
                <MudNumericField @bind-Value="_carpet.Width" Label="Width" Margin="Margin.Normal"
                                 For="@(() => _carpet.Width)"></MudNumericField>
                <MudNumericField @bind-Value="_carpet.Length" Label="Length" Margin="Margin.Normal"
                                 For="@(() => _carpet.Length)"></MudNumericField>
                <MudNumericField @bind-Value="_carpet.SquareYardPrice" Label="Price per Yard" AdornmentIcon="@Icons.Material.Filled.AttachMoney" Step=".01m" Margin="Margin.Normal"
                                 For="@(() => _carpet.SquareYardPrice)"></MudNumericField>

                <MudItem>
                    @if (file != null)
                    {
                        <MudAlert>@file.Name</MudAlert>
                    }
                    @if (!string.IsNullOrEmpty(_carpet.ImageFileName))
                    {
                        <MudAlert>@(_carpet.ImageFileName)</MudAlert>
                    }
                    <InputFile id="fileInput" hidden OnChange="UploadFiles" />
                    <div>

                        <MudButton HtmlTag="label"
                                   Variant="Variant.Text"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   StartIcon="@Icons.Filled.CloudUpload"
                                   for="fileInput">
                            upload
                        </MudButton>

                        @if (!string.IsNullOrEmpty(_carpet.ImageFileName))
                        {
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Secondary"
                                       StartIcon="@Icons.Filled.CloudDownload"
                                       Size="Size.Small"
                                       Link="@($"https://easycarpetstorageaccount.blob.core.windows.net/easycarpetblobcontainer/{_carpet.ImageFileName}")" Target="_blank">
                                download
                            </MudButton>
                        }
                    </div>
                </MudItem>


            </MudCardContent>
            <MudCardActions Class="d-flex justify-end py-2 px-1">
                @if (_isEditing)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Delete">Delete</MudButton>
                }

                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Cancel" Class="ml-4" Disabled="IsProcessing">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-2" Disabled="IsProcessing">Save</MudButton>
            </MudCardActions>
        </MudCard>

    </EditForm>
}

@code {

    private ServerSideValidator _serverSideValidator;
    private bool _isEditing = false;
    private string _transactionMode = "Adding a Carpet";
    private CarpetFormModel _carpet = new CarpetFormModel();

    [Inject] private Microsoft.Extensions.Localization.IStringLocalizer<CarpetForm> localizer { get; set; }

    [Parameter] public CarpetFormModel Carpet { get; set; }
    [Parameter] public bool IsProcessing { get; set; } = false;
    [Parameter] public CommandResponse CommandResponse { get; set; }
    [Parameter] public Action OnCancel { get; set; }
    [Parameter] public Func<Guid, Task> OnDelete { get; set; }
    [Parameter] public Func<CarpetFormModel, Task> OnSubmit { get; set; }

    public IBrowserFile file { get; set; }

    private void Cancel() => OnCancel();
    private void Delete() => OnDelete(_carpet.Id);

    private async Task HandleSubmitAsync()
    {
        await OnSubmit(_carpet);
    }

    protected override void OnParametersSet()
    {
        if (Carpet != null)
        {
            _carpet.Id = Carpet.Id;
            _carpet.Brand = Carpet.Brand;
            _carpet.Description = Carpet.Description;
            _carpet.Length = Carpet.Length;
            _carpet.Name = Carpet.Name;
            _carpet.SquareYardPrice = Carpet.SquareYardPrice;
            _carpet.Style = Carpet.Style;
            _carpet.Width = Carpet.Width;
            _carpet.ImageFileName = Carpet.ImageFileName;

            _isEditing = true;
            _transactionMode = "Editing a Carpet";
        }


        if (CommandResponse != null && !CommandResponse.IsSuccessful)
        {
            _serverSideValidator.DisplayErrors(CommandResponse.Errors);
        }
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
        if (file != null)
        {
            var buffer = new byte[file.Size];
            var extension = Path.GetExtension(file.Name);
            var Document = await file.OpenReadStream(file.Size).ReadAsync(buffer);
            _carpet.UploadRequest = new UploadRequest { Data = buffer, Extension = extension };
        }
    }
}
