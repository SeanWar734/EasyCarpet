@using EasyCarpet.Web.Helpers
@using EasyCarpet.Shared
@using EasyCarpet.Shared.Features.Orders
@using EasyCarpet.Shared.Features.Carpets
@using EasyCarpet.Shared.Features.Customers
@using EasyCarpet.Shared.Features.Installers
@using EasyCarpet.Shared.Features.Retailers
@inject IMediator _mediator
@using MediatR

@if (_order != null)
{
    <EditForm Model="@_order" OnValidSubmit="HandleSubmitAsync">
        <FluentValidationValidator />
        <ServerSideValidator @ref="_serverSideValidator" />

        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@_transactionMode</MudText>
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudItem xs="12" sm="6" md="4">
                    <MudAutocomplete T="ListCustomerDto" @bind-Value="customer" Label="Customer" SearchFunc="@SearchCustomer" ResetValueOnEmptyText="true" CoerceText="false" ToStringFunc="@(c=> c==null?null : $"{c.FirstName} {c.LastName}")">
                        <ItemTemplate Context="c">
                            <MudText>@($"{c.FirstName} {c.LastName}")</MudText>
                        </ItemTemplate>
                    </MudAutocomplete>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudAutocomplete T="ListCarpetDto" @bind-Value="carpet" Label="Carpet" SearchFunc="@SearchCarpet" ResetValueOnEmptyText="true" CoerceText="false" ToStringFunc="@(c=> c==null?null : $"{c.Name} {c.SquareYardPrice.ToString("C")}/yard")">
                        <ItemTemplate Context="c">
                            <MudText>@($"{c.Name} {c.SquareYardPrice.ToString("C")}/yard")</MudText>
                        </ItemTemplate>
                    </MudAutocomplete>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudAutocomplete T="ListInstallerDto" @bind-Value="installer" Label="Installer" SearchFunc="@SearchInstaller" ResetValueOnEmptyText="true" CoerceText="false" ToStringFunc="@(i=> i==null?null : $"{i.FirstName} {i.LastName}")">
                        <ItemTemplate Context="i">
                            <MudText>@($"{i.FirstName} {i.LastName}")</MudText>
                        </ItemTemplate>
                    </MudAutocomplete>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudAutocomplete T="LookupRetailerDto" @bind-Value="_order.Retailer" Label="Retailer" SearchFunc="@SearchRetailer" ResetValueOnEmptyText="true" CoerceText="false" ToStringFunc="@(r=> r==null?null : $"{r.CompanyName}")">
                        <ItemTemplate Context="r">
                            <MudText>@($"{r.CompanyName}")</MudText>
                        </ItemTemplate>
                    </MudAutocomplete>
                </MudItem>

            </MudCardContent>
            <MudCardActions Class="d-flex justify-end py-2 px-1">
                @if (_isEditing)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Delete">Delete</MudButton>
                }

                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Cancel" Class="ml-4" Disabled="IsProcessing">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-2" Disabled="IsProcessing">Save</MudButton>
            </MudCardActions>
        </MudCard>

    </EditForm>
}

@code {

    private ServerSideValidator _serverSideValidator;
    private bool _isEditing = false;
    private string _transactionMode = "Adding a Order";
    private OrderFormModel _order = new OrderFormModel();
    private IEnumerable<ListCarpetDto> _carpet;
    private IEnumerable<ListCustomerDto> _customers;
    private IEnumerable<ListInstallerDto> _installers;
    private IEnumerable<ListRetailerDto> _retailers;

    private ListCustomerDto customer;
    private ListCarpetDto carpet;
    private ListInstallerDto installer;
    private ListRetailerDto retailer;

    [Parameter] public OrderFormModel Order { get; set; }
    [Parameter] public bool IsProcessing { get; set; } = false;
    [Parameter] public CommandResponse CommandResponse { get; set; }
    [Parameter] public Action OnCancel { get; set; }
    [Parameter] public Func<Guid, Task> OnDelete { get; set; }
    [Parameter] public Func<OrderFormModel, Task> OnSubmit { get; set; }

    private void Cancel() => OnCancel();
    private void Delete() => OnDelete(_order.Id);
    private async Task HandleSubmitAsync()
    {
        UpdateOrder();
        await OnSubmit(_order);
    }

    private void UpdateOrder()
    {
        _order.CarpetId = carpet.Id;
        _order.CustomerId = customer.Id;
        _order.InstallerId = installer.Id;
        _order.Total = installer.SquareYardPrice + carpet.SquareYardPrice;
    }

    protected override async Task OnInitializedAsync()
    {
        if (Order != null)
        {
            _order = (await _mediator.Send(new GetOrderRequest(Order.Id))).Order;
        }

        _retailers = (await _mediator.Send(new ListRetailerRequest())).Retailers.Where(x => x.Id != Guid.Empty);
        _carpet = (await _mediator.Send(new ListCarpetRequest())).Carpet;
        _installers = (await _mediator.Send(new ListInstallerRequest())).Installers;
        _customers = (await _mediator.Send(new ListCustomerRequest())).Customers;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Order != null)
        {
            _order.Id = Order.Id;
            _order.CustomerId = Order.CustomerId;
            _order.CarpetId = Order.CarpetId;
            _order.InstallerId = Order.InstallerId;
            _order.Total = Order.Total;

            carpet = (await _mediator.Send(new ListCarpetRequest())).Carpet.Where(x => x.Id == Order.CarpetId).FirstOrDefault();
            customer = (await _mediator.Send(new ListCustomerRequest())).Customers.Where(x => x.Id == Order.CustomerId).FirstOrDefault();
            retailer = (await _mediator.Send(new ListRetailerRequest())).Retailers.Where(x => x.Id == Order.Retailer.Id).FirstOrDefault();
            installer = (await _mediator.Send(new ListInstallerRequest())).Installers.Where(x => x.Id == Order.InstallerId).FirstOrDefault();

            _isEditing = true;
            _transactionMode = "Editing a Order";
        }


        if (CommandResponse != null && !CommandResponse.IsSuccessful)
        {
            _serverSideValidator.DisplayErrors(CommandResponse.Errors);
        }
    }

    private async Task<IEnumerable<ListCustomerDto>> SearchCustomer(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
        {
            return _customers;
        }
        else
        {
            return _customers.Where(x => x.FirstName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }
    }

    private async Task<IEnumerable<ListCarpetDto>> SearchCarpet(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
        {
            return _carpet;
        }
        else
        {
            return _carpet.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }
    }

    private async Task<IEnumerable<ListInstallerDto>> SearchInstaller(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
        {
            return _installers;
        }
        else
        {
            return _installers.Where(x => x.FirstName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }
    }

    private async Task<IEnumerable<LookupRetailerDto>> SearchRetailer(string value)
    {
        return (await _mediator.Send(new LookupRetailerRequest(10, value))).Retailers;
    }
}
